#!/usr/bin/env python3

from __future__ import (absolute_import, division, print_function)

__metaclass__ = type
__doc__ = 'Credential getter for KeePassHttp'

import argparse
import base64
import logging
import sys
from functools import lru_cache
from typing import Dict, Optional

import keyring
import requests
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from requests import HTTPError

Credential = Dict[str, str]
Credentials = Dict[str, Credential]

KEYRING_ID = 'tia-get-credentials'


class GetCredentialsException(Exception):
    pass


def main():
    args = parse_args()

    logging.basicConfig(
        level=logging.DEBUG if args.verbose else logging.WARNING,
        format='%(message)s'
    )
    k = KeePassQuery()

    try:
        if args.command == 'get-user':
            print(k.get_credential(args.url)['user'])
        if args.command == 'get-password':
            print(k.get_credential(args.url)['password'])
        elif args.command == 'get-user-password':
            print(k.get_password(args.url, args.user))
        elif args.command == 'get-all-credentials':
            print_credentials(k.get_all_credentials(args.url))
    except GetCredentialsException as e:
        logging.error(str(e))
        exit(1)


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', '--verbose')
    subparsers = parser.add_subparsers(help='command', dest='command')
    subparsers.required = True

    get_user_parser = subparsers.add_parser('get-user')
    get_user_parser.add_argument('url', type=str)

    get_password_parser = subparsers.add_parser('get-password')
    get_password_parser.add_argument('url', type=str)

    get_user_password_parser = subparsers.add_parser('get-user-password')
    get_user_password_parser.add_argument('url', type=str)
    get_user_password_parser.add_argument('user', type=str, default='')

    get_all_credentials_parser = subparsers.add_parser('get-all-credentials')
    get_all_credentials_parser.add_argument('url', type=str)

    return parser.parse_args()


def print_credentials(credentials: Credentials):
    print('\n\n'.join([
        'user     : {user}\npassword : {password}'.format(**credential)
        for credential in credentials.values()
    ]))


class MissingCredentialException(GetCredentialsException):
    pass


class TooManyCredentialsException(GetCredentialsException):
    pass


class KeePassQuery:
    def __init__(self):
        self.__kp = None

    def get_credential(self, url: str) -> Optional[Credential]:
        credentials = self.get_all_credentials(url)

        if not credentials:
            raise MissingCredentialException(
                'Missing credential; '
                'url={url!r}'.format(
                    url=url
                )
            )

        if len(credentials) > 1:
            raise TooManyCredentialsException(
                'Too many matched credentials when asked only one; '
                'url={url!r}, count={count}'.format(
                    url=url,
                    count=len(credentials)
                ),
            )

        return next(iter(credentials.values()))

    def get_password(self, url: str, user: str) -> str:
        credentials = self.get_all_credentials(url)
        credential = credentials.get(user)

        if credential is None:
            raise MissingCredentialException(
                'Missing credential; '
                'url={url!r}, user={user!r}'.format(
                    url=url,
                    user=user
                )
            )

        return credential['password']

    def get_all_credentials(self, url: str) -> Credentials:
        self.__connect()

        return self.__kp.get_credentials(url)

    def __connect(self):
        if self.__kp is not None:
            return

        self.__kp = _KeepassHTTP(KEYRING_ID)


class _KeepassHTTP:
    def __init__(self, keyring_id: Optional[str] = None):
        self.__logger = logging.getLogger(self.__class__.__name__)
        super(_KeepassHTTP, self).__init__()
        self.k = _Keepasshttplib(keyring_id)

    @lru_cache()
    def get_credentials(self, url: str) -> Credentials:
        self.__logger.info('Getting credentials for {!r}'.format(url))
        try:
            return self.k.get_credentials(url)
        except Exception as e:
            raise KeepassHTTPError('Error obtaining credential for {!r}: {}'.format(url, e))


class KeepassHTTPError(GetCredentialsException):
    pass


class _Keepasshttplib:
    """Encrypting and decrypting strings using AES"""

    def __init__(self, keyring_id: Optional[str] = None):
        self.keyring_service_name = "keepasshttplib"
        if keyring_id:
            self.keyring_service_name += "-{}".format(keyring_id)

    def get_credentials(self, url: str) -> Credentials:
        key = self.get_key_from_keyring()
        if key is None:
            key = _Encrypter.generate_key()
        connection_id = self.get_id_from_keyring()
        is_associated = False
        if connection_id is not None:
            is_associated = self.test_associate(key, connection_id)

        if not is_associated:
            print('running test associate')
            connection_id = self.associate(key)
            keyring.set_password(self.keyring_service_name, "connection_id", connection_id)
            keyring.set_password(self.keyring_service_name, "private_key", base64.b64encode(key).decode())
            is_associated = True

        if is_associated:
            return self.get_credentials_from_client(key, url, connection_id)
        else:
            return {}

    def get_key_from_keyring(self):
        """getting key from Keyring"""
        private_key = keyring.get_password(self.keyring_service_name, "private_key")

        if private_key is not None:
            return base64.b64decode(private_key)
        else:
            return None

    def get_id_from_keyring(self):
        """getting identification from keyring"""
        return keyring.get_password(self.keyring_service_name, "connection_id")

    def test_associate(self, key, connection_id):
        """testing if associated"""
        enc = _Encrypter(key)
        base64_private_key, nonce, verifier = enc.get_verifier()

        return _HttpClient.test_associate(nonce, verifier, connection_id)

    def associate(self, key):
        """if associate"""
        enc = _Encrypter(key)
        base64_private_key, nonce, verifier = enc.get_verifier()

        return _HttpClient.associate(base64_private_key, nonce, verifier)

    def get_credentials_from_client(self, key, url, connection_id) -> Credentials:
        """getting credentials from client"""
        enc = _Encrypter(key)
        base64_private_key, nonce, verifier = enc.get_verifier()
        encrypted_url = enc.encrypt(url, base64.b64decode(nonce))
        encrypted_credentials, nonce = _HttpClient.get_logins(connection_id, nonce, verifier, encrypted_url)
        iv = base64.b64decode(nonce)

        return {
            credential['user']: credential
            for credential in [
                {
                    'user': enc.decrypt(encrypted_credential['Login'], iv),
                    'password': enc.decrypt(encrypted_credential['Password'], iv)
                }
                for encrypted_credential in encrypted_credentials
            ]
        }


class _Encrypter:
    """Encrypting and decrypting strings using AES"""

    def __init__(self, key):
        self.key = key
        self.pkcs7_encoder = _PKCS7Encoder(16)

    def get_verifier(self, iv=None):
        """getting the verifier"""
        if iv is None:
            iv = get_random_bytes(16)
        aes = AES.new(self.key, AES.MODE_CBC, iv)

        base64_private_key = base64.b64encode(self.key).decode()
        base64_iv = base64.b64encode(iv).decode()
        padded_iv = self.pkcs7_encoder.encode(base64_iv)
        verifier = base64.b64encode(aes.encrypt(padded_iv.encode())).decode()
        return base64_private_key, base64_iv, verifier

    def encrypt(self, plain, iv: Optional[bytes] = None):
        """encryption"""
        if iv is None:
            iv = get_random_bytes(16)
        aes = AES.new(self.key, AES.MODE_CBC, iv)
        padded_plain = self.pkcs7_encoder.encode(plain)

        return base64.b64encode(aes.encrypt(padded_plain.encode())).decode()

    def decrypt(self, encrypted, iv=None):
        """decryption"""
        if iv is None:
            iv = get_random_bytes(16)
        aes = AES.new(self.key, AES.MODE_CBC, iv)
        decrypted = aes.decrypt(base64.b64decode(encrypted))

        return self.pkcs7_encoder.decode(decrypted.decode())

    @classmethod
    def generate_key(cls):
        """key generation"""
        return get_random_bytes(32)


class _PKCS7Encoder:
    def __init__(self, k=16):
        assert (k <= 256)
        assert (k > 1)
        self.__klen = k

    ## @param text The padded text for which the padding is to be removed.
    # @exception ValueError Raised when the input padding is missing or corrupt.
    def decode(self, text):
        dectext = text

        if (len(text.encode()) % self.__klen) != 0:
            raise Exception('text not %d align' % self.__klen)

        lastch = ord(text[-1])
        if lastch <= self.__klen and lastch != 0:
            trimlen = lastch
            textlen = len(text)
            for i in range(lastch):
                if ord(text[textlen - i - 1]) != lastch:
                    trimlen = 0
                    break
            if trimlen == 0:
                dectext = text
            else:
                dectext = text[:(textlen - trimlen)]

        return dectext

    def get_bytes(self, text):
        outbytes = []
        for c in text:
            outbytes.append(ord(c))
        return outbytes

    def get_text(self, inbytes):
        s = ''
        for i in inbytes:
            s += chr((i % 256))
        return s

    def __encode_inner(self, text):
        """
        Pad an input string according to PKCS#7
        if the real text is bits same ,just expand the text
        """
        enctext = text
        leftlen = self.__klen - (len(text) % self.__klen)
        lastch = chr(leftlen)
        enctext += lastch * leftlen

        return enctext

    ## @param text The text to encode.
    def encode(self, text):
        return self.__encode_inner(text)


class _HttpClient:
    URL = 'http://localhost:19455'

    @classmethod
    def associate(cls, key, nonce, verifier):
        """Associate a client with KeepassHttp."""
        payload = {
            'RequestType': 'associate',
            'Key': key,
            'Nonce': nonce,
            'Verifier': verifier
        }
        r = requests.post(cls.URL, json=payload)
        data = r.json()

        error = data.get('Error')
        if error:
            raise HTTPError(error)
        r.raise_for_status()

        return data['Id']

    @classmethod
    def test_associate(cls, nonce, verifier, connection_id):
        """Test if client is Associated with KeepassHttp."""
        payload = {
            'Nonce': nonce,
            'Verifier': verifier,
            'RequestType': 'test-associate',
            'TriggerUnlock': 'false',
            'Id': connection_id
        }
        r = requests.post(cls.URL, json=payload)
        data = r.json()

        error = data.get('Error')
        if error:
            raise HTTPError(error)
        r.raise_for_status()

        return data['Success']

    @classmethod
    def get_logins(cls, connection_id, nonce, verifier, url):
        """getting logins through url"""
        payload = {
            'RequestType': 'get-logins',
            'SortSelection': 'true',
            'TriggerUnlock': 'false',
            'Id': connection_id,
            'Nonce': nonce,
            'Verifier': verifier,
            'Url': url,
            'SubmitUrl': url
        }
        r = requests.post(cls.URL, json=payload)
        data = r.json()

        error = data.get('Error')
        if error:
            raise HTTPError(error)
        r.raise_for_status()

        return data['Entries'], data['Nonce']


if __name__ == '__main__':
    main()
